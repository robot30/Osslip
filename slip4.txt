#include<stdio.h> 
int A[10][10],M[10][10],N[10][10],Av[10],nor,nop; 
void AcceptData(int X[][10]) 
{ 
int i,j; 
for(i=0;i<nop;i++) 
{ 
printf("P%d\n",i); 
for(j=0;j<nor;j++) 
{ 
printf("%c: ",65+j); 
scanf("%d",&X[i][j]); 
} 
} 
} 
void AcceptAvailability() 
{ 
int i; 
for(i=0;i<nor;i++) 
{ 
printf("%c: ",65+i); 
scanf("%d",&Av[i]); 
} 
}
void DisplayData() 
{ 
int i,j; 
printf("\n\tAllocation\t\tMax\t\tNeed\n"); 
printf("\t"); 
for(i=0;i<3;i++) 
{ 
for(j=0;j<nor;j++) 
printf("%4c",65+j); 
printf("\t"); 
} 
for(i=0;i<nop;i++) 
{ 
printf("\nP%d\t",i); 
for(j=0;j<nor;j++) 
printf("%4d",A[i][j]); 
printf("\t"); 
for(j=0;j<nor;j++) 
printf("%4d",M[i][j]); 
printf("\t"); 
for(j=0;j<nor;j++) 
printf("%4d",N[i][j]); 
} 
printf("\nAvailable\n"); 
for(j=0;j<nor;j++) 
printf("%4d",Av[j]); 
} 
void CalcNeed() 
{ 
int i,j; 
for(i=0;i<nop;i++) 
for(j=0;j<nor;j++) 
N[i][j] = M[i][j] - A[i][j]; 
} 
void main() 
{ 
printf("\nEnter No.of Processes & No.of Resources: "); 
scanf("%d %d",&nop,&nor); 
printf("Enter Allocation\n"); 
AcceptData(A); 
printf("Enter Max Requirement\n");
AcceptData(M); 
printf("Enter Availability\n"); 
AcceptAvailability(); 
CalcNeed(); 
DisplayData(); 
}

Q.2 
86, 147, 91, 170, 95, 130, 102, 70
Starting Head position= 125
Direction: Left.
Ans ïƒ 
#include <stdio.h>
#include <math.h>
int main()
{
    int queue[20], n, head, i, j, k, seek = 0, max, diff, temp, queue1[20], 
    queue2[20], temp1 = 0, temp2 = 0;
    float avg;
    printf("Enter the max range of disk\n");
    scanf("%d", &max);
    printf("Enter the initial head position\n");
    scanf("%d", &head);
    printf("Enter the size of queue request\n");
    scanf("%d", &n);
    printf("Enter the queue of disk positions to be read\n");
    for (i = 1; i <= n; i++)
    {
        scanf("%d", &temp);
        if (temp >= head)
        {
            queue1[temp1] = temp;
            temp1++;
        }
        else
        {
            queue2[temp2] = temp;
            temp2++;
        }
    }
    for (i = 0; i < temp1 - 1; i++)
    {
        for (j = i + 1; j < temp1; j++)
        {
            if (queue1[i] > queue1[j])
            {
                temp = queue1[i];
                queue1[i] = queue1[j];
                queue1[j] = temp;
            }
        }
    }
    for (i = 0; i < temp2 - 1; i++)
    {
        for (j = i + 1; j < temp2; j++)
        {
            if (queue2[i] < queue2[j])
            {
                temp = queue2[i];
                queue2[i] = queue2[j];
                queue2[j] = temp;
            }
        }
    }
    for (i = 1, j = 0; j < temp1; i++, j++)
        queue[i] = queue1[j];
    queue[i] = max;
    for (i = temp1 + 2, j = 0; j < temp2; i++, j++)
        queue[i] = queue2[j];
    queue[i] = 0;
    queue[0] = head;
    for (j = 0; j <= n + 1; j++)
    {
        diff = abs(queue[j + 1] - queue[j]);
        seek += diff;
        printf("Disk head moves from %d to %d with seek %d\n", queue[j], 
        queue[j + 1], diff);
    }
    printf("Total seek time is %d\n", seek);
    avg = seek / (float)n;
    printf("Average seek time is %f\n", avg);
    return 0;
}
